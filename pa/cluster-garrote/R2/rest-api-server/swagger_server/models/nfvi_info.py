# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ll import LL  # noqa: F401,E501
from swagger_server.models.ll_cost import LLCost  # noqa: F401,E501
from swagger_server.models.nfvi_po_p import NFVIPoP  # noqa: F401,E501
from swagger_server.models.vl_cost import VLCost  # noqa: F401,E501
from swagger_server.models.vnf_cost import VNFCost  # noqa: F401,E501
from swagger_server import util


class NFVIInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, resource_types=None, nfvi_po_ps=None, l_ls=None, vnf_costs=None, ll_costs=None, vl_costs=None):  # noqa: E501
        """NFVIInfo - a model defined in Swagger

        :param resource_types: The resource_types of this NFVIInfo.  # noqa: E501
        :type resource_types: List[str]
        :param nfvi_po_ps: The nfvi_po_ps of this NFVIInfo.  # noqa: E501
        :type nfvi_po_ps: List[NFVIPoP]
        :param l_ls: The l_ls of this NFVIInfo.  # noqa: E501
        :type l_ls: List[LL]
        :param vnf_costs: The vnf_costs of this NFVIInfo.  # noqa: E501
        :type vnf_costs: List[VNFCost]
        :param ll_costs: The ll_costs of this NFVIInfo.  # noqa: E501
        :type ll_costs: List[LLCost]
        :param vl_costs: The vl_costs of this NFVIInfo.  # noqa: E501
        :type vl_costs: List[VLCost]
        """
        self.swagger_types = {
            'resource_types': List[str],
            'nfvi_po_ps': List[NFVIPoP],
            'l_ls': List[LL],
            'vnf_costs': List[VNFCost],
            'll_costs': List[LLCost],
            'vl_costs': List[VLCost]
        }

        self.attribute_map = {
            'resource_types': 'resource_types',
            'nfvi_po_ps': 'NFVIPoPs',
            'l_ls': 'LLs',
            'vnf_costs': 'VNFCosts',
            'll_costs': 'LLCosts',
            'vl_costs': 'VLCosts'
        }

        self._resource_types = resource_types
        self._nfvi_po_ps = nfvi_po_ps
        self._l_ls = l_ls
        self._vnf_costs = vnf_costs
        self._ll_costs = ll_costs
        self._vl_costs = vl_costs

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NFVIInfo of this NFVIInfo.  # noqa: E501
        :rtype: NFVIInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_types(self):
        """Gets the resource_types of this NFVIInfo.

        Allowed NFVI resource types  # noqa: E501

        :return: The resource_types of this NFVIInfo.
        :rtype: List[str]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this NFVIInfo.

        Allowed NFVI resource types  # noqa: E501

        :param resource_types: The resource_types of this NFVIInfo.
        :type resource_types: List[str]
        """

        self._resource_types = resource_types

    @property
    def nfvi_po_ps(self):
        """Gets the nfvi_po_ps of this NFVIInfo.

        List of NFVIPoPs  # noqa: E501

        :return: The nfvi_po_ps of this NFVIInfo.
        :rtype: List[NFVIPoP]
        """
        return self._nfvi_po_ps

    @nfvi_po_ps.setter
    def nfvi_po_ps(self, nfvi_po_ps):
        """Sets the nfvi_po_ps of this NFVIInfo.

        List of NFVIPoPs  # noqa: E501

        :param nfvi_po_ps: The nfvi_po_ps of this NFVIInfo.
        :type nfvi_po_ps: List[NFVIPoP]
        """
        if nfvi_po_ps is None:
            raise ValueError("Invalid value for `nfvi_po_ps`, must not be `None`")  # noqa: E501

        self._nfvi_po_ps = nfvi_po_ps

    @property
    def l_ls(self):
        """Gets the l_ls of this NFVIInfo.

        Logical links between NFVIPoPs  # noqa: E501

        :return: The l_ls of this NFVIInfo.
        :rtype: List[LL]
        """
        return self._l_ls

    @l_ls.setter
    def l_ls(self, l_ls):
        """Sets the l_ls of this NFVIInfo.

        Logical links between NFVIPoPs  # noqa: E501

        :param l_ls: The l_ls of this NFVIInfo.
        :type l_ls: List[LL]
        """
        if l_ls is None:
            raise ValueError("Invalid value for `l_ls`, must not be `None`")  # noqa: E501

        self._l_ls = l_ls

    @property
    def vnf_costs(self):
        """Gets the vnf_costs of this NFVIInfo.

        Costs to place specific VNFs to specific NFVIPoPs  # noqa: E501

        :return: The vnf_costs of this NFVIInfo.
        :rtype: List[VNFCost]
        """
        return self._vnf_costs

    @vnf_costs.setter
    def vnf_costs(self, vnf_costs):
        """Sets the vnf_costs of this NFVIInfo.

        Costs to place specific VNFs to specific NFVIPoPs  # noqa: E501

        :param vnf_costs: The vnf_costs of this NFVIInfo.
        :type vnf_costs: List[VNFCost]
        """

        self._vnf_costs = vnf_costs

    @property
    def ll_costs(self):
        """Gets the ll_costs of this NFVIInfo.

        Cost of using a LL between NFVIPoPs  # noqa: E501

        :return: The ll_costs of this NFVIInfo.
        :rtype: List[LLCost]
        """
        return self._ll_costs

    @ll_costs.setter
    def ll_costs(self, ll_costs):
        """Sets the ll_costs of this NFVIInfo.

        Cost of using a LL between NFVIPoPs  # noqa: E501

        :param ll_costs: The ll_costs of this NFVIInfo.
        :type ll_costs: List[LLCost]
        """

        self._ll_costs = ll_costs

    @property
    def vl_costs(self):
        """Gets the vl_costs of this NFVIInfo.

        Cost of using a VL inside a NFVIPoP  # noqa: E501

        :return: The vl_costs of this NFVIInfo.
        :rtype: List[VLCost]
        """
        return self._vl_costs

    @vl_costs.setter
    def vl_costs(self, vl_costs):
        """Sets the vl_costs of this NFVIInfo.

        Cost of using a VL inside a NFVIPoP  # noqa: E501

        :param vl_costs: The vl_costs of this NFVIInfo.
        :type vl_costs: List[VLCost]
        """

        self._vl_costs = vl_costs
