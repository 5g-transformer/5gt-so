# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.location import Location  # noqa: F401,E501
from swagger_server.models.nfvi_po_p_available_capabilities import NFVIPoPAvailableCapabilities  # noqa: F401,E501
from swagger_server.models.nfvi_po_p_capabilities import NFVIPoPCapabilities  # noqa: F401,E501
from swagger_server import util


class NFVIPoP(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id=None, location=None, gw_ip_address=None, capabilities=None, available_capabilities=None, failure_rate=None, internal_latency=None):  # noqa: E501
        """NFVIPoP - a model defined in Swagger

        :param id: The id of this NFVIPoP.  # noqa: E501
        :type id: str
        :param location: The location of this NFVIPoP.  # noqa: E501
        :type location: Location
        :param gw_ip_address: The gw_ip_address of this NFVIPoP.  # noqa: E501
        :type gw_ip_address: str
        :param capabilities: The capabilities of this NFVIPoP.  # noqa: E501
        :type capabilities: NFVIPoPCapabilities
        :param available_capabilities: The available_capabilities of this NFVIPoP.  # noqa: E501
        :type available_capabilities: NFVIPoPAvailableCapabilities
        :param failure_rate: The failure_rate of this NFVIPoP.  # noqa: E501
        :type failure_rate: float
        :param internal_latency: The internal_latency of this NFVIPoP.  # noqa: E501
        :type internal_latency: float
        """
        self.swagger_types = {
            'id': str,
            'location': Location,
            'gw_ip_address': str,
            'capabilities': NFVIPoPCapabilities,
            'available_capabilities': NFVIPoPAvailableCapabilities,
            'failure_rate': float,
            'internal_latency': float
        }

        self.attribute_map = {
            'id': 'id',
            'location': 'location',
            'gw_ip_address': 'gw_ip_address',
            'capabilities': 'capabilities',
            'available_capabilities': 'availableCapabilities',
            'failure_rate': 'failure_rate',
            'internal_latency': 'internal_latency'
        }

        self._id = id
        self._location = location
        self._gw_ip_address = gw_ip_address
        self._capabilities = capabilities
        self._available_capabilities = available_capabilities
        self._failure_rate = failure_rate
        self._internal_latency = internal_latency

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NFVIPoP of this NFVIPoP.  # noqa: E501
        :rtype: NFVIPoP
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NFVIPoP.

        NFVIPoP id  # noqa: E501

        :return: The id of this NFVIPoP.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NFVIPoP.

        NFVIPoP id  # noqa: E501

        :param id: The id of this NFVIPoP.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def location(self):
        """Gets the location of this NFVIPoP.


        :return: The location of this NFVIPoP.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NFVIPoP.


        :param location: The location of this NFVIPoP.
        :type location: Location
        """

        self._location = location

    @property
    def gw_ip_address(self):
        """Gets the gw_ip_address of this NFVIPoP.

        Gateway IP address  # noqa: E501

        :return: The gw_ip_address of this NFVIPoP.
        :rtype: str
        """
        return self._gw_ip_address

    @gw_ip_address.setter
    def gw_ip_address(self, gw_ip_address):
        """Sets the gw_ip_address of this NFVIPoP.

        Gateway IP address  # noqa: E501

        :param gw_ip_address: The gw_ip_address of this NFVIPoP.
        :type gw_ip_address: str
        """

        self._gw_ip_address = gw_ip_address

    @property
    def capabilities(self):
        """Gets the capabilities of this NFVIPoP.


        :return: The capabilities of this NFVIPoP.
        :rtype: NFVIPoPCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this NFVIPoP.


        :param capabilities: The capabilities of this NFVIPoP.
        :type capabilities: NFVIPoPCapabilities
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")  # noqa: E501

        self._capabilities = capabilities

    @property
    def available_capabilities(self):
        """Gets the available_capabilities of this NFVIPoP.


        :return: The available_capabilities of this NFVIPoP.
        :rtype: NFVIPoPAvailableCapabilities
        """
        return self._available_capabilities

    @available_capabilities.setter
    def available_capabilities(self, available_capabilities):
        """Sets the available_capabilities of this NFVIPoP.


        :param available_capabilities: The available_capabilities of this NFVIPoP.
        :type available_capabilities: NFVIPoPAvailableCapabilities
        """

        self._available_capabilities = available_capabilities

    @property
    def failure_rate(self):
        """Gets the failure_rate of this NFVIPoP.

        Probability the NFVIPoP fails  # noqa: E501

        :return: The failure_rate of this NFVIPoP.
        :rtype: float
        """
        return self._failure_rate

    @failure_rate.setter
    def failure_rate(self, failure_rate):
        """Sets the failure_rate of this NFVIPoP.

        Probability the NFVIPoP fails  # noqa: E501

        :param failure_rate: The failure_rate of this NFVIPoP.
        :type failure_rate: float
        """

        self._failure_rate = failure_rate

    @property
    def internal_latency(self):
        """Gets the internal_latency of this NFVIPoP.

        Latency between two VNFs launched inside the NFVIPoP  # noqa: E501

        :return: The internal_latency of this NFVIPoP.
        :rtype: float
        """
        return self._internal_latency

    @internal_latency.setter
    def internal_latency(self, internal_latency):
        """Sets the internal_latency of this NFVIPoP.

        Latency between two VNFs launched inside the NFVIPoP  # noqa: E501

        :param internal_latency: The internal_latency of this NFVIPoP.
        :type internal_latency: float
        """

        self._internal_latency = internal_latency
