# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VNFCost(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cost=None, vnfid=None, nfvi_po_pid=None):  # noqa: E501
        """VNFCost - a model defined in Swagger

        :param cost: The cost of this VNFCost.  # noqa: E501
        :type cost: float
        :param vnfid: The vnfid of this VNFCost.  # noqa: E501
        :type vnfid: str
        :param nfvi_po_pid: The nfvi_po_pid of this VNFCost.  # noqa: E501
        :type nfvi_po_pid: str
        """
        self.swagger_types = {
            'cost': float,
            'vnfid': str,
            'nfvi_po_pid': str
        }

        self.attribute_map = {
            'cost': 'cost',
            'vnfid': 'vnfid',
            'nfvi_po_pid': 'NFVIPoPid'
        }

        self._cost = cost
        self._vnfid = vnfid
        self._nfvi_po_pid = nfvi_po_pid

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VNFCost of this VNFCost.  # noqa: E501
        :rtype: VNFCost
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this VNFCost.

        Cost of placing the given VNF at the given NFVIPoP  # noqa: E501

        :return: The cost of this VNFCost.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this VNFCost.

        Cost of placing the given VNF at the given NFVIPoP  # noqa: E501

        :param cost: The cost of this VNFCost.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def vnfid(self):
        """Gets the vnfid of this VNFCost.

        VNF identifier  # noqa: E501

        :return: The vnfid of this VNFCost.
        :rtype: str
        """
        return self._vnfid

    @vnfid.setter
    def vnfid(self, vnfid):
        """Sets the vnfid of this VNFCost.

        VNF identifier  # noqa: E501

        :param vnfid: The vnfid of this VNFCost.
        :type vnfid: str
        """
        if vnfid is None:
            raise ValueError("Invalid value for `vnfid`, must not be `None`")  # noqa: E501

        self._vnfid = vnfid

    @property
    def nfvi_po_pid(self):
        """Gets the nfvi_po_pid of this VNFCost.

        NFVIPoP identifier  # noqa: E501

        :return: The nfvi_po_pid of this VNFCost.
        :rtype: str
        """
        return self._nfvi_po_pid

    @nfvi_po_pid.setter
    def nfvi_po_pid(self, nfvi_po_pid):
        """Sets the nfvi_po_pid of this VNFCost.

        NFVIPoP identifier  # noqa: E501

        :param nfvi_po_pid: The nfvi_po_pid of this VNFCost.
        :type nfvi_po_pid: str
        """
        if nfvi_po_pid is None:
            raise ValueError("Invalid value for `nfvi_po_pid`, must not be `None`")  # noqa: E501

        self._nfvi_po_pid = nfvi_po_pid
