# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.network_service import NetworkService  # noqa: F401,E501
from swagger_server.models.nfvi_info import NFVIInfo  # noqa: F401,E501
from swagger_server import util


class PARequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, req_id=None, nfvi=None, nsd=None, callback=None):  # noqa: E501
        """PARequest - a model defined in Swagger

        :param req_id: The req_id of this PARequest.  # noqa: E501
        :type req_id: str
        :param nfvi: The nfvi of this PARequest.  # noqa: E501
        :type nfvi: NFVIInfo
        :param nsd: The nsd of this PARequest.  # noqa: E501
        :type nsd: NetworkService
        :param callback: The callback of this PARequest.  # noqa: E501
        :type callback: str
        """
        self.swagger_types = {
            'req_id': str,
            'nfvi': NFVIInfo,
            'nsd': NetworkService,
            'callback': str
        }

        self.attribute_map = {
            'req_id': 'ReqId',
            'nfvi': 'nfvi',
            'nsd': 'nsd',
            'callback': 'callback'
        }

        self._req_id = req_id
        self._nfvi = nfvi
        self._nsd = nsd
        self._callback = callback

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PARequest of this PARequest.  # noqa: E501
        :rtype: PARequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def req_id(self):
        """Gets the req_id of this PARequest.

        Unique request identifier  # noqa: E501

        :return: The req_id of this PARequest.
        :rtype: str
        """
        return self._req_id

    @req_id.setter
    def req_id(self, req_id):
        """Sets the req_id of this PARequest.

        Unique request identifier  # noqa: E501

        :param req_id: The req_id of this PARequest.
        :type req_id: str
        """
        if req_id is None:
            raise ValueError("Invalid value for `req_id`, must not be `None`")  # noqa: E501

        self._req_id = req_id

    @property
    def nfvi(self):
        """Gets the nfvi of this PARequest.


        :return: The nfvi of this PARequest.
        :rtype: NFVIInfo
        """
        return self._nfvi

    @nfvi.setter
    def nfvi(self, nfvi):
        """Sets the nfvi of this PARequest.


        :param nfvi: The nfvi of this PARequest.
        :type nfvi: NFVIInfo
        """

        self._nfvi = nfvi

    @property
    def nsd(self):
        """Gets the nsd of this PARequest.


        :return: The nsd of this PARequest.
        :rtype: NetworkService
        """
        return self._nsd

    @nsd.setter
    def nsd(self, nsd):
        """Sets the nsd of this PARequest.


        :param nsd: The nsd of this PARequest.
        :type nsd: NetworkService
        """

        self._nsd = nsd

    @property
    def callback(self):
        """Gets the callback of this PARequest.

        Callback URL  # noqa: E501

        :return: The callback of this PARequest.
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this PARequest.

        Callback URL  # noqa: E501

        :param callback: The callback of this PARequest.
        :type callback: str
        """
        if callback is None:
            raise ValueError("Invalid value for `callback`, must not be `None`")  # noqa: E501

        self._callback = callback
