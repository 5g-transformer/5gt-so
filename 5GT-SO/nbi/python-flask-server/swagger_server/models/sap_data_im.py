# Author: Jordi Baranda
# Copyright (C) 2019 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SapDataIm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sapd_id: str=None, sap_name: str=None, description: str=None, address: str=None):  # noqa: E501
        """SapDataIm - a model defined in Swagger

        :param sapd_id: The sapd_id of this SapDataIm.  # noqa: E501
        :type sapd_id: str
        :param sap_name: The sap_name of this SapDataIm.  # noqa: E501
        :type sap_name: str
        :param description: The description of this SapDataIm.  # noqa: E501
        :type description: str
        :param address: The address of this SapDataIm.  # noqa: E501
        :type address: str
        """
        self.swagger_types = {
            "sapd_id": str,
            "sap_name": str,
            "description": str,
            "address": str
        }

        self.attribute_map = {
            "sapd_id": "sapdId",
            "sap_name": "sapName",
            "description": "description",
            "address": "address"
        }

        self._sapd_id = sapd_id
        self._sap_name = sap_name
        self._description = description
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> "SapDataIm":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SapData_im of this SapDataIm.  # noqa: E501
        :rtype: SapDataIm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sapd_id(self) -> str:
        """Gets the sapd_id of this SapDataIm.


        :return: The sapd_id of this SapDataIm.
        :rtype: str
        """
        return self._sapd_id

    @sapd_id.setter
    def sapd_id(self, sapd_id: str):
        """Sets the sapd_id of this SapDataIm.


        :param sapd_id: The sapd_id of this SapDataIm.
        :type sapd_id: str
        """
        if sapd_id is None:
            raise ValueError("Invalid value for `sapd_id`, must not be `None`")  # noqa: E501

        self._sapd_id = sapd_id

    @property
    def sap_name(self) -> str:
        """Gets the sap_name of this SapDataIm.


        :return: The sap_name of this SapDataIm.
        :rtype: str
        """
        return self._sap_name

    @sap_name.setter
    def sap_name(self, sap_name: str):
        """Sets the sap_name of this SapDataIm.


        :param sap_name: The sap_name of this SapDataIm.
        :type sap_name: str
        """
        if sap_name is None:
            raise ValueError("Invalid value for `sap_name`, must not be `None`")  # noqa: E501

        self._sap_name = sap_name

    @property
    def description(self) -> str:
        """Gets the description of this SapDataIm.


        :return: The description of this SapDataIm.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this SapDataIm.


        :param description: The description of this SapDataIm.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def address(self) -> str:
        """Gets the address of this SapDataIm.


        :return: The address of this SapDataIm.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this SapDataIm.


        :param address: The address of this SapDataIm.
        :type address: str
        """

        self._address = address
