# Author: Inaki Pascual
# Copyright (C) 2018 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NsInstantiationRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, flavour_id: str=None, ns_instantiation_level_id: str=None):  # noqa: E501
        """NsInstantiationRequest - a model defined in Swagger

        :param flavour_id: The flavour_id of this NsInstantiationRequest.  # noqa: E501
        :type flavour_id: str
        :param ns_instantiation_level_id: The ns_instantiation_level_id of this NsInstantiationRequest.  # noqa: E501
        :type ns_instantiation_level_id: str
        """
        self.swagger_types = {
            "flavour_id": str,
            "ns_instantiation_level_id": str
        }

        self.attribute_map = {
            "flavour_id": "flavourId",
            "ns_instantiation_level_id": "nsInstantiationLevelId"
        }

        self._flavour_id = flavour_id
        self._ns_instantiation_level_id = ns_instantiation_level_id

    @classmethod
    def from_dict(cls, dikt) -> "NsInstantiationRequest":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NsInstantiationRequest of this NsInstantiationRequest.  # noqa: E501
        :rtype: NsInstantiationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flavour_id(self) -> str:
        """Gets the flavour_id of this NsInstantiationRequest.


        :return: The flavour_id of this NsInstantiationRequest.
        :rtype: str
        """
        return self._flavour_id

    @flavour_id.setter
    def flavour_id(self, flavour_id: str):
        """Sets the flavour_id of this NsInstantiationRequest.


        :param flavour_id: The flavour_id of this NsInstantiationRequest.
        :type flavour_id: str
        """
        if flavour_id is None:
            raise ValueError("Invalid value for `flavour_id`, must not be `None`")  # noqa: E501

        self._flavour_id = flavour_id

    @property
    def ns_instantiation_level_id(self) -> str:
        """Gets the ns_instantiation_level_id of this NsInstantiationRequest.


        :return: The ns_instantiation_level_id of this NsInstantiationRequest.
        :rtype: str
        """
        return self._ns_instantiation_level_id

    @ns_instantiation_level_id.setter
    def ns_instantiation_level_id(self, ns_instantiation_level_id: str):
        """Sets the ns_instantiation_level_id of this NsInstantiationRequest.


        :param ns_instantiation_level_id: The ns_instantiation_level_id of this NsInstantiationRequest.
        :type ns_instantiation_level_id: str
        """
        if ns_instantiation_level_id is None:
            raise ValueError("Invalid value for `ns_instantiation_level_id`, must not be `None`")  # noqa: E501

        self._ns_instantiation_level_id = ns_instantiation_level_id
