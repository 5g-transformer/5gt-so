# Author: Jordi Baranda
# Copyright (C) 2019 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.pnf_ext_cp_info_im import PnfExtCpInfoIm  # noqa: F401,E501
from swagger_server import util


class PnfInfoIm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, pnf_name: str=None, pnfd_info_id: str=None, cp_info: List[PnfExtCpInfoIm]=None):  # noqa: E501
        """PnfInfoIm - a model defined in Swagger

        :param pnf_name: The pnf_name of this PnfInfoIm.  # noqa: E501
        :type pnf_name: str
        :param pnfd_info_id: The pnfd_info_id of this PnfInfoIm.  # noqa: E501
        :type pnfd_info_id: str
        :param cp_info: The cp_info of this PnfInfoIm.  # noqa: E501
        :type cp_info: List[PnfExtCpInfoIm]
        """
        self.swagger_types = {
            "pnf_name": str,
            "pnfd_info_id": str,
            "cp_info": List[PnfExtCpInfoIm]
        }

        self.attribute_map = {
            "pnf_name": "pnfName",
            "pnfd_info_id": "pnfdInfoId",
            "cp_info": "cpInfo"
        }

        self._pnf_name = pnf_name
        self._pnfd_info_id = pnfd_info_id
        self._cp_info = cp_info

    @classmethod
    def from_dict(cls, dikt) -> "PnfInfoIm":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PnfInfo_im of this PnfInfoIm.  # noqa: E501
        :rtype: PnfInfoIm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pnf_name(self) -> str:
        """Gets the pnf_name of this PnfInfoIm.


        :return: The pnf_name of this PnfInfoIm.
        :rtype: str
        """
        return self._pnf_name

    @pnf_name.setter
    def pnf_name(self, pnf_name: str):
        """Sets the pnf_name of this PnfInfoIm.


        :param pnf_name: The pnf_name of this PnfInfoIm.
        :type pnf_name: str
        """
        if pnf_name is None:
            raise ValueError("Invalid value for `pnf_name`, must not be `None`")  # noqa: E501

        self._pnf_name = pnf_name

    @property
    def pnfd_info_id(self) -> str:
        """Gets the pnfd_info_id of this PnfInfoIm.


        :return: The pnfd_info_id of this PnfInfoIm.
        :rtype: str
        """
        return self._pnfd_info_id

    @pnfd_info_id.setter
    def pnfd_info_id(self, pnfd_info_id: str):
        """Sets the pnfd_info_id of this PnfInfoIm.


        :param pnfd_info_id: The pnfd_info_id of this PnfInfoIm.
        :type pnfd_info_id: str
        """
        if pnfd_info_id is None:
            raise ValueError("Invalid value for `pnfd_info_id`, must not be `None`")  # noqa: E501

        self._pnfd_info_id = pnfd_info_id

    @property
    def cp_info(self) -> List[PnfExtCpInfoIm]:
        """Gets the cp_info of this PnfInfoIm.


        :return: The cp_info of this PnfInfoIm.
        :rtype: List[PnfExtCpInfoIm]
        """
        return self._cp_info

    @cp_info.setter
    def cp_info(self, cp_info: List[PnfExtCpInfoIm]):
        """Sets the cp_info of this PnfInfoIm.


        :param cp_info: The cp_info of this PnfInfoIm.
        :type cp_info: List[PnfExtCpInfoIm]
        """
        if cp_info is None:
            raise ValueError("Invalid value for `cp_info`, must not be `None`")  # noqa: E501

        self._cp_info = cp_info
