# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LocationInfoIm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, latitude: float=None, longitude: float=None, altitude: float=None, range: float=None):  # noqa: E501
        """LocationInfoIm - a model defined in Swagger

        :param latitude: The latitude of this LocationInfoIm.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this LocationInfoIm.  # noqa: E501
        :type longitude: float
        :param altitude: The altitude of this LocationInfoIm.  # noqa: E501
        :type altitude: float
        :param range: The range of this LocationInfoIm.  # noqa: E501
        :type range: float
        """
        self.swagger_types = {
            "latitude": float,
            "longitude": float,
            "altitude": float,
            "range": float
        }

        self.attribute_map = {
            "latitude": "latitude",
            "longitude": "longitude",
            "altitude": "altitude",
            "range": "range"
        }

        self._latitude = latitude
        self._longitude = longitude
        self._altitude = altitude
        self._range = range

    @classmethod
    def from_dict(cls, dikt) -> "LocationInfoIm":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The locationInfo_im of this LocationInfoIm.  # noqa: E501
        :rtype: LocationInfoIm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latitude(self) -> float:
        """Gets the latitude of this LocationInfoIm.


        :return: The latitude of this LocationInfoIm.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this LocationInfoIm.


        :param latitude: The latitude of this LocationInfoIm.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this LocationInfoIm.


        :return: The longitude of this LocationInfoIm.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this LocationInfoIm.


        :param longitude: The longitude of this LocationInfoIm.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def altitude(self) -> float:
        """Gets the altitude of this LocationInfoIm.


        :return: The altitude of this LocationInfoIm.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude: float):
        """Sets the altitude of this LocationInfoIm.


        :param altitude: The altitude of this LocationInfoIm.
        :type altitude: float
        """
        if altitude is None:
            raise ValueError("Invalid value for `altitude`, must not be `None`")  # noqa: E501

        self._altitude = altitude

    @property
    def range(self) -> float:
        """Gets the range of this LocationInfoIm.


        :return: The range of this LocationInfoIm.
        :rtype: float
        """
        return self._range

    @range.setter
    def range(self, range: float):
        """Sets the range of this LocationInfoIm.


        :param range: The range of this LocationInfoIm.
        :type range: float
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501

        self._range = range
