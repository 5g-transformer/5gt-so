# Author: Jordi Baranda
# Copyright (C) 2019 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user_defined_datadef import UserDefinedDatadef  # noqa: F401,E501
from swagger_server import util


class VnfOnboardingRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, version: str=None, provider: str=None, checksum: str=None, vnf_package_path: str=None, user_defined_data: UserDefinedDatadef=None):  # noqa: E501
        """VnfOnboardingRequest - a model defined in Swagger

        :param name: The name of this VnfOnboardingRequest.  # noqa: E501
        :type name: str
        :param version: The version of this VnfOnboardingRequest.  # noqa: E501
        :type version: str
        :param provider: The provider of this VnfOnboardingRequest.  # noqa: E501
        :type provider: str
        :param checksum: The checksum of this VnfOnboardingRequest.  # noqa: E501
        :type checksum: str
        :param vnf_package_path: The vnf_package_path of this VnfOnboardingRequest.  # noqa: E501
        :type vnf_package_path: str
        :param user_defined_data: The user_defined_data of this VnfOnboardingRequest.  # noqa: E501
        :type user_defined_data: UserDefinedDatadef
        """
        self.swagger_types = {
            "name": str,
            "version": str,
            "provider": str,
            "checksum": str,
            "vnf_package_path": str,
            "user_defined_data": UserDefinedDatadef
        }

        self.attribute_map = {
            "name": "name",
            "version": "version",
            "provider": "provider",
            "checksum": "checksum",
            "vnf_package_path": "vnfPackagePath",
            "user_defined_data": "userDefinedData"
        }

        self._name = name
        self._version = version
        self._provider = provider
        self._checksum = checksum
        self._vnf_package_path = vnf_package_path
        self._user_defined_data = user_defined_data

    @classmethod
    def from_dict(cls, dikt) -> "VnfOnboardingRequest":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VnfOnboardingRequest of this VnfOnboardingRequest.  # noqa: E501
        :rtype: VnfOnboardingRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this VnfOnboardingRequest.


        :return: The name of this VnfOnboardingRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this VnfOnboardingRequest.


        :param name: The name of this VnfOnboardingRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self) -> str:
        """Gets the version of this VnfOnboardingRequest.


        :return: The version of this VnfOnboardingRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this VnfOnboardingRequest.


        :param version: The version of this VnfOnboardingRequest.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def provider(self) -> str:
        """Gets the provider of this VnfOnboardingRequest.


        :return: The provider of this VnfOnboardingRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider: str):
        """Sets the provider of this VnfOnboardingRequest.


        :param provider: The provider of this VnfOnboardingRequest.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def checksum(self) -> str:
        """Gets the checksum of this VnfOnboardingRequest.


        :return: The checksum of this VnfOnboardingRequest.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum: str):
        """Sets the checksum of this VnfOnboardingRequest.


        :param checksum: The checksum of this VnfOnboardingRequest.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")  # noqa: E501

        self._checksum = checksum

    @property
    def vnf_package_path(self) -> str:
        """Gets the vnf_package_path of this VnfOnboardingRequest.


        :return: The vnf_package_path of this VnfOnboardingRequest.
        :rtype: str
        """
        return self._vnf_package_path

    @vnf_package_path.setter
    def vnf_package_path(self, vnf_package_path: str):
        """Sets the vnf_package_path of this VnfOnboardingRequest.


        :param vnf_package_path: The vnf_package_path of this VnfOnboardingRequest.
        :type vnf_package_path: str
        """
        if vnf_package_path is None:
            raise ValueError("Invalid value for `vnf_package_path`, must not be `None`")  # noqa: E501

        self._vnf_package_path = vnf_package_path

    @property
    def user_defined_data(self) -> UserDefinedDatadef:
        """Gets the user_defined_data of this VnfOnboardingRequest.


        :return: The user_defined_data of this VnfOnboardingRequest.
        :rtype: UserDefinedDatadef
        """
        return self._user_defined_data

    @user_defined_data.setter
    def user_defined_data(self, user_defined_data: UserDefinedDatadef):
        """Sets the user_defined_data of this VnfOnboardingRequest.


        :param user_defined_data: The user_defined_data of this VnfOnboardingRequest.
        :type user_defined_data: UserDefinedDatadef
        """

        self._user_defined_data = user_defined_data
