# Author: Jordi Baranda
# Copyright (C) 2019 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AffinityOrAntiAffinityRuleIm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, descriptor_id: List[str]=None, vnf_instance_id: List[str]=None, affinity_or_anti_affinity: bool=None, scope: str=None):  # noqa: E501
        """AffinityOrAntiAffinityRuleIm - a model defined in Swagger

        :param descriptor_id: The descriptor_id of this AffinityOrAntiAffinityRuleIm.  # noqa: E501
        :type descriptor_id: List[str]
        :param vnf_instance_id: The vnf_instance_id of this AffinityOrAntiAffinityRuleIm.  # noqa: E501
        :type vnf_instance_id: List[str]
        :param affinity_or_anti_affinity: The affinity_or_anti_affinity of this AffinityOrAntiAffinityRuleIm.  # noqa: E501
        :type affinity_or_anti_affinity: bool
        :param scope: The scope of this AffinityOrAntiAffinityRuleIm.  # noqa: E501
        :type scope: str
        """
        self.swagger_types = {
            "descriptor_id": List[str],
            "vnf_instance_id": List[str],
            "affinity_or_anti_affinity": bool,
            "scope": str
        }

        self.attribute_map = {
            "descriptor_id": "descriptorId",
            "vnf_instance_id": "vnfInstanceId",
            "affinity_or_anti_affinity": "affinityOrAntiAffinity",
            "scope": "scope"
        }

        self._descriptor_id = descriptor_id
        self._vnf_instance_id = vnf_instance_id
        self._affinity_or_anti_affinity = affinity_or_anti_affinity
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt) -> "AffinityOrAntiAffinityRuleIm":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AffinityOrAntiAffinityRule_im of this AffinityOrAntiAffinityRuleIm.  # noqa: E501
        :rtype: AffinityOrAntiAffinityRuleIm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def descriptor_id(self) -> List[str]:
        """Gets the descriptor_id of this AffinityOrAntiAffinityRuleIm.


        :return: The descriptor_id of this AffinityOrAntiAffinityRuleIm.
        :rtype: List[str]
        """
        return self._descriptor_id

    @descriptor_id.setter
    def descriptor_id(self, descriptor_id: List[str]):
        """Sets the descriptor_id of this AffinityOrAntiAffinityRuleIm.


        :param descriptor_id: The descriptor_id of this AffinityOrAntiAffinityRuleIm.
        :type descriptor_id: List[str]
        """
        if descriptor_id is None:
            raise ValueError("Invalid value for `descriptor_id`, must not be `None`")  # noqa: E501

        self._descriptor_id = descriptor_id

    @property
    def vnf_instance_id(self) -> List[str]:
        """Gets the vnf_instance_id of this AffinityOrAntiAffinityRuleIm.


        :return: The vnf_instance_id of this AffinityOrAntiAffinityRuleIm.
        :rtype: List[str]
        """
        return self._vnf_instance_id

    @vnf_instance_id.setter
    def vnf_instance_id(self, vnf_instance_id: List[str]):
        """Sets the vnf_instance_id of this AffinityOrAntiAffinityRuleIm.


        :param vnf_instance_id: The vnf_instance_id of this AffinityOrAntiAffinityRuleIm.
        :type vnf_instance_id: List[str]
        """

        self._vnf_instance_id = vnf_instance_id

    @property
    def affinity_or_anti_affinity(self) -> bool:
        """Gets the affinity_or_anti_affinity of this AffinityOrAntiAffinityRuleIm.


        :return: The affinity_or_anti_affinity of this AffinityOrAntiAffinityRuleIm.
        :rtype: bool
        """
        return self._affinity_or_anti_affinity

    @affinity_or_anti_affinity.setter
    def affinity_or_anti_affinity(self, affinity_or_anti_affinity: bool):
        """Sets the affinity_or_anti_affinity of this AffinityOrAntiAffinityRuleIm.


        :param affinity_or_anti_affinity: The affinity_or_anti_affinity of this AffinityOrAntiAffinityRuleIm.
        :type affinity_or_anti_affinity: bool
        """
        if affinity_or_anti_affinity is None:
            raise ValueError("Invalid value for `affinity_or_anti_affinity`, must not be `None`")  # noqa: E501

        self._affinity_or_anti_affinity = affinity_or_anti_affinity

    @property
    def scope(self) -> str:
        """Gets the scope of this AffinityOrAntiAffinityRuleIm.


        :return: The scope of this AffinityOrAntiAffinityRuleIm.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this AffinityOrAntiAffinityRuleIm.


        :param scope: The scope of this AffinityOrAntiAffinityRuleIm.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope
