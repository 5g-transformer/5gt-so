# Author: Jordi Baranda
# Copyright (C) 2019 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.scale_by_step_data_im import ScaleByStepDataIm  # noqa: F401,E501
from swagger_server.models.scale_to_level_data_im import ScaleToLevelDataIm  # noqa: F401,E501
from swagger_server import util


class ScaleVnfDataIm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, vnf_instance_id: str=None, type: str=None, scale_to_level_data: ScaleToLevelDataIm=None, scale_by_step_data: ScaleByStepDataIm=None):  # noqa: E501
        """ScaleVnfDataIm - a model defined in Swagger

        :param vnf_instance_id: The vnf_instance_id of this ScaleVnfDataIm.  # noqa: E501
        :type vnf_instance_id: str
        :param type: The type of this ScaleVnfDataIm.  # noqa: E501
        :type type: str
        :param scale_to_level_data: The scale_to_level_data of this ScaleVnfDataIm.  # noqa: E501
        :type scale_to_level_data: ScaleToLevelDataIm
        :param scale_by_step_data: The scale_by_step_data of this ScaleVnfDataIm.  # noqa: E501
        :type scale_by_step_data: ScaleByStepDataIm
        """
        self.swagger_types = {
            "vnf_instance_id": str,
            "type": str,
            "scale_to_level_data": ScaleToLevelDataIm,
            "scale_by_step_data": ScaleByStepDataIm
        }

        self.attribute_map = {
            "vnf_instance_id": "vnfInstanceId",
            "type": "type",
            "scale_to_level_data": "scaleToLevelData",
            "scale_by_step_data": "scaleByStepData"
        }

        self._vnf_instance_id = vnf_instance_id
        self._type = type
        self._scale_to_level_data = scale_to_level_data
        self._scale_by_step_data = scale_by_step_data

    @classmethod
    def from_dict(cls, dikt) -> "ScaleVnfDataIm":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScaleVnfData_im of this ScaleVnfDataIm.  # noqa: E501
        :rtype: ScaleVnfDataIm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vnf_instance_id(self) -> str:
        """Gets the vnf_instance_id of this ScaleVnfDataIm.


        :return: The vnf_instance_id of this ScaleVnfDataIm.
        :rtype: str
        """
        return self._vnf_instance_id

    @vnf_instance_id.setter
    def vnf_instance_id(self, vnf_instance_id: str):
        """Sets the vnf_instance_id of this ScaleVnfDataIm.


        :param vnf_instance_id: The vnf_instance_id of this ScaleVnfDataIm.
        :type vnf_instance_id: str
        """
        if vnf_instance_id is None:
            raise ValueError("Invalid value for `vnf_instance_id`, must not be `None`")  # noqa: E501

        self._vnf_instance_id = vnf_instance_id

    @property
    def type(self) -> str:
        """Gets the type of this ScaleVnfDataIm.


        :return: The type of this ScaleVnfDataIm.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ScaleVnfDataIm.


        :param type: The type of this ScaleVnfDataIm.
        :type type: str
        """
        allowed_values = ["SCALE_OUT", "SCALE_IN", "SCALE_UP", "SCALE_DOWN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def scale_to_level_data(self) -> ScaleToLevelDataIm:
        """Gets the scale_to_level_data of this ScaleVnfDataIm.


        :return: The scale_to_level_data of this ScaleVnfDataIm.
        :rtype: ScaleToLevelDataIm
        """
        return self._scale_to_level_data

    @scale_to_level_data.setter
    def scale_to_level_data(self, scale_to_level_data: ScaleToLevelDataIm):
        """Sets the scale_to_level_data of this ScaleVnfDataIm.


        :param scale_to_level_data: The scale_to_level_data of this ScaleVnfDataIm.
        :type scale_to_level_data: ScaleToLevelDataIm
        """

        self._scale_to_level_data = scale_to_level_data

    @property
    def scale_by_step_data(self) -> ScaleByStepDataIm:
        """Gets the scale_by_step_data of this ScaleVnfDataIm.


        :return: The scale_by_step_data of this ScaleVnfDataIm.
        :rtype: ScaleByStepDataIm
        """
        return self._scale_by_step_data

    @scale_by_step_data.setter
    def scale_by_step_data(self, scale_by_step_data: ScaleByStepDataIm):
        """Sets the scale_by_step_data of this ScaleVnfDataIm.


        :param scale_by_step_data: The scale_by_step_data of this ScaleVnfDataIm.
        :type scale_by_step_data: ScaleByStepDataIm
        """

        self._scale_by_step_data = scale_by_step_data
