# Author: Jordi Baranda
# Copyright (C) 2019 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ScaleByStepDataIm(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, aspect_id: str=None, number_of_steps: int=None, additional_param: str=None):  # noqa: E501
        """ScaleByStepDataIm - a model defined in Swagger

        :param type: The type of this ScaleByStepDataIm.  # noqa: E501
        :type type: str
        :param aspect_id: The aspect_id of this ScaleByStepDataIm.  # noqa: E501
        :type aspect_id: str
        :param number_of_steps: The number_of_steps of this ScaleByStepDataIm.  # noqa: E501
        :type number_of_steps: int
        :param additional_param: The additional_param of this ScaleByStepDataIm.  # noqa: E501
        :type additional_param: str
        """
        self.swagger_types = {
            "type": str,
            "aspect_id": str,
            "number_of_steps": int,
            "additional_param": str
        }

        self.attribute_map = {
            "type": "type",
            "aspect_id": "aspectId",
            "number_of_steps": "numberOfSteps",
            "additional_param": "additionalParam"
        }

        self._type = type
        self._aspect_id = aspect_id
        self._number_of_steps = number_of_steps
        self._additional_param = additional_param

    @classmethod
    def from_dict(cls, dikt) -> "ScaleByStepDataIm":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScaleByStepData_im of this ScaleByStepDataIm.  # noqa: E501
        :rtype: ScaleByStepDataIm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ScaleByStepDataIm.


        :return: The type of this ScaleByStepDataIm.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ScaleByStepDataIm.


        :param type: The type of this ScaleByStepDataIm.
        :type type: str
        """
        allowed_values = ["SCALE_IN", "SCALE_OUT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def aspect_id(self) -> str:
        """Gets the aspect_id of this ScaleByStepDataIm.


        :return: The aspect_id of this ScaleByStepDataIm.
        :rtype: str
        """
        return self._aspect_id

    @aspect_id.setter
    def aspect_id(self, aspect_id: str):
        """Sets the aspect_id of this ScaleByStepDataIm.


        :param aspect_id: The aspect_id of this ScaleByStepDataIm.
        :type aspect_id: str
        """
        if aspect_id is None:
            raise ValueError("Invalid value for `aspect_id`, must not be `None`")  # noqa: E501

        self._aspect_id = aspect_id

    @property
    def number_of_steps(self) -> int:
        """Gets the number_of_steps of this ScaleByStepDataIm.


        :return: The number_of_steps of this ScaleByStepDataIm.
        :rtype: int
        """
        return self._number_of_steps

    @number_of_steps.setter
    def number_of_steps(self, number_of_steps: int):
        """Sets the number_of_steps of this ScaleByStepDataIm.


        :param number_of_steps: The number_of_steps of this ScaleByStepDataIm.
        :type number_of_steps: int
        """

        self._number_of_steps = number_of_steps

    @property
    def additional_param(self) -> str:
        """Gets the additional_param of this ScaleByStepDataIm.


        :return: The additional_param of this ScaleByStepDataIm.
        :rtype: str
        """
        return self._additional_param

    @additional_param.setter
    def additional_param(self, additional_param: str):
        """Sets the additional_param of this ScaleByStepDataIm.


        :param additional_param: The additional_param of this ScaleByStepDataIm.
        :type additional_param: str
        """

        self._additional_param = additional_param
