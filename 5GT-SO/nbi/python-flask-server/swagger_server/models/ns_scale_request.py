# Author: Jordi Baranda
# Copyright (C) 2019 CTTC/CERCA
# License: To be defined. Currently use is restricted to partners of the 5G-Transformer project,
#          http://5g-transformer.eu/, no use or redistribution of any kind outside the 5G-Transformer project is
#          allowed.
# Disclaimer: this software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.scale_ns_data_im import ScaleNsDataIm  # noqa: F401,E501
from swagger_server.models.scale_vnf_data_im import ScaleVnfDataIm  # noqa: F401,E501
from swagger_server import util


class NsScaleRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, scale_type: str=None, scale_ns_data: ScaleNsDataIm=None, scale_vnf_data: List[ScaleVnfDataIm]=None, scale_time: str=None):  # noqa: E501
        """NsScaleRequest - a model defined in Swagger

        :param scale_type: The scale_type of this NsScaleRequest.  # noqa: E501
        :type scale_type: str
        :param scale_ns_data: The scale_ns_data of this NsScaleRequest.  # noqa: E501
        :type scale_ns_data: ScaleNsDataIm
        :param scale_vnf_data: The scale_vnf_data of this NsScaleRequest.  # noqa: E501
        :type scale_vnf_data: List[ScaleVnfDataIm]
        :param scale_time: The scale_time of this NsScaleRequest.  # noqa: E501
        :type scale_time: str
        """
        self.swagger_types = {
            "scale_type": str,
            "scale_ns_data": ScaleNsDataIm,
            "scale_vnf_data": List[ScaleVnfDataIm],
            "scale_time": str
        }

        self.attribute_map = {
            "scale_type": "scaleType",
            "scale_ns_data": "scaleNsData",
            "scale_vnf_data": "scaleVnfData",
            "scale_time": "scaleTime"
        }

        self._scale_type = scale_type
        self._scale_ns_data = scale_ns_data
        self._scale_vnf_data = scale_vnf_data
        self._scale_time = scale_time

    @classmethod
    def from_dict(cls, dikt) -> "NsScaleRequest":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NsScaleRequest of this NsScaleRequest.  # noqa: E501
        :rtype: NsScaleRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scale_type(self) -> str:
        """Gets the scale_type of this NsScaleRequest.


        :return: The scale_type of this NsScaleRequest.
        :rtype: str
        """
        return self._scale_type

    @scale_type.setter
    def scale_type(self, scale_type: str):
        """Sets the scale_type of this NsScaleRequest.


        :param scale_type: The scale_type of this NsScaleRequest.
        :type scale_type: str
        """
        allowed_values = ["SCALE_NS", "SCALE_VNF"]  # noqa: E501
        if scale_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scale_type` ({0}), must be one of {1}"
                .format(scale_type, allowed_values)
            )

        self._scale_type = scale_type

    @property
    def scale_ns_data(self) -> ScaleNsDataIm:
        """Gets the scale_ns_data of this NsScaleRequest.


        :return: The scale_ns_data of this NsScaleRequest.
        :rtype: ScaleNsDataIm
        """
        return self._scale_ns_data

    @scale_ns_data.setter
    def scale_ns_data(self, scale_ns_data: ScaleNsDataIm):
        """Sets the scale_ns_data of this NsScaleRequest.


        :param scale_ns_data: The scale_ns_data of this NsScaleRequest.
        :type scale_ns_data: ScaleNsDataIm
        """

        self._scale_ns_data = scale_ns_data

    @property
    def scale_vnf_data(self) -> List[ScaleVnfDataIm]:
        """Gets the scale_vnf_data of this NsScaleRequest.


        :return: The scale_vnf_data of this NsScaleRequest.
        :rtype: List[ScaleVnfDataIm]
        """
        return self._scale_vnf_data

    @scale_vnf_data.setter
    def scale_vnf_data(self, scale_vnf_data: List[ScaleVnfDataIm]):
        """Sets the scale_vnf_data of this NsScaleRequest.


        :param scale_vnf_data: The scale_vnf_data of this NsScaleRequest.
        :type scale_vnf_data: List[ScaleVnfDataIm]
        """

        self._scale_vnf_data = scale_vnf_data

    @property
    def scale_time(self) -> str:
        """Gets the scale_time of this NsScaleRequest.


        :return: The scale_time of this NsScaleRequest.
        :rtype: str
        """
        return self._scale_time

    @scale_time.setter
    def scale_time(self, scale_time: str):
        """Sets the scale_time of this NsScaleRequest.


        :param scale_time: The scale_time of this NsScaleRequest.
        :type scale_time: str
        """

        self._scale_time = scale_time
